/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/sandboxes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List sandboxes
         * @description Get list of sandboxes
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of results */
                    limit?: number;
                    /** @description Number of results to skip */
                    offset?: number;
                    /** @description Filter by owner user ID (root users only) */
                    owner_user_id?: string;
                    /** @description Filter by project ID */
                    project_id?: string;
                    /** @description Search in sandbox names */
                    search?: string;
                    /** @description Sort by field */
                    sort_by?: string;
                    /** @description Sort order */
                    sort_order?: "asc" | "desc";
                    /** @description Filter by status */
                    status?: "created" | "starting" | "running" | "terminating" | "terminated" | "failed";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of sandboxes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                sandboxes?: components["schemas"]["SandboxResponse"][];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new sandbox
         * @description Create a new sandbox instance
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateSandboxRequest"];
                };
            };
            responses: {
                /** @description Sandbox created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["SandboxResponse"];
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/{sandbox_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sandbox details
         * @description Get details of a specific sandbox
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sandbox details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["SandboxResponse"];
                        };
                    };
                };
                /** @description Sandbox not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /**
         * Update sandbox
         * @description Update sandbox settings (mainly timeout)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateSandboxRequest"];
                };
            };
            responses: {
                /** @description Sandbox updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Sandbox not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete sandbox
         * @description Delete a sandbox instance
         */
        delete: {
            parameters: {
                query?: {
                    /** @description Force deletion even if sandbox is running */
                    force?: boolean;
                };
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sandbox deletion initiated */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                note?: string;
                                sandbox_id?: string;
                                status?: string;
                            };
                            message?: string;
                        };
                    };
                };
                /** @description Sandbox not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/{sandbox_id}/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deploy sandbox
         * @description Deploy a sandbox using driver-based deployment
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Target cluster ID (optional) */
                        cluster_id?: string;
                        /** @description Override CPU count (optional) */
                        cpu_count?: number;
                        /** @description Override memory in MB (optional) */
                        memory_mb?: number;
                    };
                };
            };
            responses: {
                /** @description Sandbox deployed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["SandboxDeploymentResponse"];
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Sandbox not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/{sandbox_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start sandbox
         * @description Start a created sandbox
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sandbox started successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                /** @description Sandbox access domain */
                                domain?: string;
                            };
                            message?: string;
                        };
                    };
                };
                /** @description Bad request (e.g., sandbox already running) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Sandbox not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/{sandbox_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop sandbox
         * @description Stop a running sandbox
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sandbox stopped successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Bad request (e.g., sandbox not running) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Sandbox not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/{sandbox_id}/terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Terminate sandbox
         * @description Terminate a sandbox (keeps it visible in database)
         */
        post: {
            parameters: {
                query?: {
                    /** @description Force termination */
                    force?: boolean;
                };
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sandbox termination initiated */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                note?: string;
                                sandbox_id?: string;
                                status?: string;
                            };
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/{sandbox_id}/timeout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update sandbox timeout
         * @description Update the timeout for a sandbox
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Sandbox ID */
                    sandbox_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SandboxTimeoutRequest"];
                };
            };
            responses: {
                /** @description Timeout updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                remaining_time?: number;
                                timeout?: number;
                                /** Format: date-time */
                                timeout_at?: string;
                                used_lifetime?: number;
                            };
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Batch delete sandboxes
         * @description Delete multiple sandboxes in a single request
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BatchDeleteRequest"];
                };
            };
            responses: {
                /** @description Batch deletion results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["BatchDeleteResponse"];
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sandboxes/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sandbox statistics
         * @description Get sandbox statistics for the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sandbox statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["SandboxStatsResponse"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BatchDeleteRequest: {
            /**
             * @description Force deletion even if sandboxes are running
             * @default false
             */
            force: boolean;
            /** @description List of sandbox IDs to delete */
            sandbox_ids: string[];
        };
        BatchDeleteResponse: {
            /** @description List of failed deletions with errors */
            failed?: {
                error?: string;
                sandbox_id?: string;
            }[];
            /** @description Number of failed deletions */
            failed_count?: number;
            /** @description List of successfully deleted sandbox IDs */
            successful?: string[];
            /** @description Number of successfully deleted sandboxes */
            successful_count?: number;
        };
        CreateSandboxRequest: {
            /**
             * @description Internet access setting
             * @default true
             */
            allow_internet_access: boolean;
            /** @description Number of CPU cores */
            cpu_count?: number;
            /** @description Sandbox description */
            description?: string;
            /** @description Environment variables */
            env_vars?: {
                [key: string]: string;
            };
            /**
             * @description When true, return immediately; when false, wait for running/failed state
             * @default false
             */
            is_async: boolean;
            /** @description Memory in MB */
            memory_mb?: number;
            /** @description Flexible key-value metadata */
            metadata?: {
                [key: string]: string;
            };
            /** @description Sandbox name */
            name?: string;
            /** @description Project ID (optional, defaults to user's default project) */
            project_id?: string;
            /**
             * @description Security setting
             * @default true
             */
            secure: boolean;
            /** @description Storage in GB */
            storage_gb?: number;
            /** @description Template name or ID (defaults to "base") */
            template?: string;
            /** @description Timeout in seconds (defaults to 300) */
            timeout?: number;
        };
        Error: {
            /** @description Error code */
            code?: string;
            /** @description Additional error details */
            details?: Record<string, never>;
            /** @description Error message */
            message: string;
        };
        SandboxDeploymentResponse: {
            /** @description Access token for the sandbox */
            access_token?: string;
            /** @description External access URL */
            access_url?: string;
            /** @description Cluster ID where sandbox is deployed */
            cluster_id?: string;
            /** @description Kubernetes deployment name */
            deployment?: string;
            /**
             * Format: date-time
             * @description Deployment timestamp
             */
            deployment_at?: string;
            /** @description Driver version used for deployment */
            driver_version?: string;
            /** @description Kubernetes ingress name */
            ingress?: string;
            /** @description Internal cluster URL */
            internal_url?: string;
            /** @description Kubernetes namespace */
            namespace?: string;
            /** @description Sandbox ID */
            sandbox_id?: string;
            /** @description Type of sandbox deployed */
            sandbox_type?: string;
            /** @description Kubernetes service name */
            service?: string;
            /** @description Deployment status */
            status?: string;
        };
        SandboxResponse: {
            /**
             * Format: date-time
             * @description When sandbox was allocated to cluster
             */
            allocation_time?: string | null;
            /** @description Internet access setting */
            allow_internet_access?: boolean;
            /** @description Kubernetes cluster ID where sandbox is deployed */
            cluster_id?: string | null;
            /** @description Container name within the pod */
            container_name?: string | null;
            cost?: {
                /**
                 * Format: float
                 * @description Hourly rate for this sandbox
                 */
                hourlyRate?: number;
                /**
                 * Format: float
                 * @description Total cost accumulated
                 */
                totalCost?: number;
            };
            /** @description Number of CPU cores */
            cpu_count?: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at?: string;
            /**
             * @description Whether sandbox deletion is in progress
             * @default false
             */
            deletion_in_progress: boolean;
            /** @description Sandbox description */
            description?: string;
            /**
             * Format: date-time
             * @description When sandbox lifecycle ended
             */
            ended_at?: string | null;
            /** @description Environment variables */
            env_vars?: {
                [key: string]: string;
            };
            /** @description Token for sandbox access */
            envd_access_token?: string | null;
            /** @description Last known Kubernetes pod status */
            last_pod_status?: string | null;
            /** @description Memory in MB */
            memory_mb?: number;
            /** @description Metadata key-value pairs */
            metadata?: {
                [key: string]: string;
            };
            /** @description Sandbox name */
            name?: string;
            /** @description User namespace ID in the cluster */
            namespace_id?: string | null;
            /** @description Node where pod is scheduled */
            node_name?: string | null;
            owner?: {
                /** @description Display name of the owner */
                display_name?: string | null;
                /** @description Email of the owner */
                email?: string;
                /** @description User ID of the owner */
                user_id?: string;
                /** @description Username of the owner */
                username?: string;
            };
            /** @description Owner user ID */
            owner_user_id?: string;
            /** @description Pod IP address */
            pod_ip?: string | null;
            /** @description Kubernetes pod name */
            pod_name?: string | null;
            /** @description Kubernetes pod UID */
            pod_uid?: string | null;
            /** @description Project ID */
            project_id?: string;
            /** @description Project name */
            project_name?: string;
            /** @description Reason for current status or failure */
            reason?: string;
            resources?: {
                /** @description Bandwidth allocation (placeholder) */
                bandwidth?: number;
                /** @description CPU cores allocated */
                cpu?: number;
                /** @description Memory in MB allocated */
                memory?: number;
                /** @description Storage in GB allocated */
                storage?: number;
            };
            /** @description Sandbox access domain */
            sandbox_domain?: string | null;
            /** @description Unique sandbox identifier */
            sandbox_id?: string;
            /** @description Security setting */
            secure?: boolean;
            /**
             * Format: date-time
             * @description When sandbox started running
             */
            started_at?: string | null;
            /**
             * @description Current sandbox status
             * @enum {string}
             */
            status?: "created" | "starting" | "running" | "terminating" | "terminated" | "failed";
            /**
             * Format: date-time
             * @description When sandbox stopped
             */
            stopped_at?: string | null;
            /** @description Storage in GB */
            storage_gb?: number;
            /**
             * @description Detailed substatus for transitional states
             * @enum {string}
             */
            substatus?: "allocating" | "deploying" | "initializing" | "waiting_ready" | "cleaning_resources" | "cleaning_data";
            /** @description Template ID */
            template_id?: string;
            /** @description Template name */
            template_name?: string;
            /** @description Timeout in seconds */
            timeout?: number;
            /**
             * Format: date-time
             * @description When sandbox will timeout
             */
            timeout_at?: string | null;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at?: string;
            /** @description Uptime in seconds */
            uptime?: number;
        };
        SandboxStatsResponse: {
            /**
             * Format: float
             * @description Average CPU usage percentage
             */
            avg_cpu_usage?: number;
            /**
             * Format: float
             * @description Average memory usage percentage
             */
            avg_memory_usage?: number;
            /** @description Number of failed sandboxes */
            failed_sandboxes?: number;
            /** @description Number of running sandboxes */
            running_sandboxes?: number;
            /** @description Number of terminated sandboxes */
            terminated_sandboxes?: number;
            /**
             * Format: float
             * @description Total cost accumulated
             */
            total_cost?: number;
            /** @description Total number of sandboxes */
            total_sandboxes?: number;
            /**
             * Format: float
             * @description Total uptime in hours
             */
            total_uptime_hours?: number;
        };
        SandboxTimeoutRequest: {
            /** @description New timeout in seconds (must be >= already used lifetime) */
            timeout: number;
        };
        SuccessResponse: {
            data?: Record<string, never>;
            message?: string;
            success?: boolean;
        };
        UpdateSandboxRequest: {
            /** @description New timeout in seconds (must be greater than current timeout) */
            timeout: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
